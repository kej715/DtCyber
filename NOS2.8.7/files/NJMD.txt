      PROGRAM NJMD
C
C     NJMD - NJE MESSAGE DAEMON
C
C     NJMD ENABLES NETWORK SERVICES TO BE BUILT ATOP NJE MESSAGING.
C     IT PROVIDES A BUILT-IN ECHO SERVICE AND A FACILITY FROM
C     WHICH OTHER SERVICES CAN BE IMPLEMENTED. THE FACILITY
C     IS BASED UPON A CONFIGURATION FILE. EACH LINE OF THE
C     CONFIGURATION FILE DEFINES THE NAME OF A SERVICE AND
C     A COMMAND TO BE EXECUTED WHENEVER A MESSAGE IS RECEIVED
C     FOR THE SERVICE. USUALLY, THE COMMAND IS A CALL TO A
C     CCL PROCEDURE. NJMD CREATES AND SUBMITS A BATCH JOB
C     THAT CALLS THE COMMAND. TWO PARAMETERS ARE PASSED TO
C     THE COMMAND:
C
C       1. THE ORIGINATING USERNAME (1 - 8 CHARACTERS)
C       2. THE ORIGINATING NJE NODE NAME (1 - 8 CHARACTERS)
C
C     THE TEXT OF THE NJE MESSAGE FROM THE ORIGINATING USER
C     IS PROVIDED AS THE SUBMITTED JOB'S INPUT FILE.
C
C     SYNOPSIS OF NJMD COMMAND
C       NJMD[,CF=LFN]
C
C     COMMAND LINE PARAMETERS
C       CF - NAME OF LOCAL FILE CONTAINING SERVICE DEFINITIONS
C
      IMPLICIT INTEGER (A-Z)
      PARAMETER (MAXSVCS = 20)
      DIMENSION HDR(10),NIT(10,MAXSVCS),TA(20)
      CHARACTER*1   CH,MTYPE
      CHARACTER*7   CFNAME
      CHARACTER*8   DNODE,DUSER,ONODE,OUSER
      CHARACTER*10  ARG,ARGV(20)
      CHARACTER*8   SVCNAMS(MAXSVCS)
      CHARACTER*80  SVCCMDS(MAXSVCS)
      DIMENSION     SVCACNS(MAXSVCS)
      CHARACTER*150 TEXT

      CFNAME = ' '

      DO 1 I = 1,10
        HDR(I) = 0
 1    CONTINUE

C     ----------------------------------------------------------------
C
C     PARSE COMMAND LINE ARGUMENTS
C
      CALL NJMARGS(ARGC,ARGV,TEXT,TEXTL)

      DO 10 I = 2,ARGC
        ARG = ARGV(I)
        IF (ARG(1:3).EQ.'CF=') THEN
          CFNAME = ARG(4:10)
        ELSE
          CALL REMARK('INVALID PARAMETER - '//ARG)
          CALL NJMABT
        ENDIF
 10   CONTINUE
      
      SVCS          = 1
      SVCNAMS(SVCS) = 'ECHO'
      SVCCMDS(SVCS) = '*'

      IF (CFNAME.NE.' ') THEN
C
C       READ THE CONFIGURATION FILE TO DISCOVER
C       SERVICE DEFINITONS
C
        LN   = 1
        OPEN(1,FILE=CFNAME,STATUS='OLD')
 20     CONTINUE
        READ(1,'(A)',END=50) TEXT
        CI = 1
 30     CONTINUE
        IF (CI.LE.LEN(TEXT)) THEN
          IF (TEXT(CI:CI).NE.' ') THEN
            CI = CI + 1
            GOTO 30
          ENDIF
        ENDIF
        IF (CI.GT.LEN(TEXT)) THEN
          WRITE(TEXT,'(I2)') LN
          CALL REMARK('INVALID SERVICE DEFINITION IN LINE '//TEXT(1:2))
          CALL NJMABT
        ENDIF
        SVCS = SVCS + 1
        IF (SVCS.GT.MAXSVCS) THEN
          CALL REMARK('TOO MANY SERVICE DEFINITIONS')
          CALL NJMABT
        ENDIF
        SVCNAMS(SVCS) = TEXT(1:CI - 1)
 40     CONTINUE
        CI = CI + 1
        IF (CI.LE.LEN(TEXT)) THEN
          IF (TEXT(CI:CI).EQ.' ') GOTO 40
        ENDIF
        IF (CI.GT.LEN(TEXT)) THEN
          WRITE(TEXT,'(I2)') LN
          CALL REMARK('INVALID SERVICE DEFINITION IN LINE '//TEXT(1:2))
          CALL NJMABT
        ENDIF
        SVCCMDS(SVCS) = TEXT(CI:LEN(TEXT))
        LN = LN + 1
        GOTO 20

 50     CONTINUE
 
      ENDIF

C     ----------------------------------------------------------------
C
C     OPEN COMMUNICATION WITH THE NETWORK
C
      CALL NJMOPEN(HDR,RC,"NJU",1)
      IF (RC.NE.0) THEN
        CALL REMARK('FAILED TO OPEN COMMUNICATION, RC='//TEXT(1:2))
        CALL NJMABT
      ENDIF

C     ----------------------------------------------------------------
C
C     CREATE A CONNECTION TO *NJF* FOR EACH SERVICE AND BEGIN
C     LISTENING FOR MESSAGES
C
      DO 70 I = 1,SVCS
        CALL NJMCONN(HDR,ACN,RC)
        IF (RC.NE.0) THEN
          IF (RC.EQ.13) RC = SHIFT(HDR(5),-6).AND.O"77"
          WRITE(TEXT,'(I2)') RC
          CALL REMARK('FAILED TO CONNECT TO NJF, RC='//TEXT(1:2))
          CALL NJMABT
        ENDIF
        SVCACNS(I) = ACN
        CALL NJMSETU(HDR,ACN,RC,SVCNAMS(I))
        IF (RC.NE.0) THEN
          WRITE(TEXT,'(I2)') RC
          CALL REMARK('FAILED TO REGISTER SERVICE '//SVCNAMS(I)//
     +                ', RC='//TEXT(1:2))
          CALL NJMABT
        ENDIF
 60     CONTINUE
        CALL NJMPOLL(HDR,CN,RC,5,TA,20)
        IF (RC.EQ.0) THEN
          IF (CN.NE.ACN) GOTO 60
          CALL NJMRECV(TA,MTYPE,OUSER,ONODE,DUSER,TEXT,TEXTL,RC)
          IF (MTYPE.NE.'S') GOTO 60
          IF (RC.NE.0) THEN
            WRITE(TEXT,'(I2)') RC
            CALL REMARK('FAILED TO REGISTER SERVICE '//SVCNAMS(I)//
     +                  ', RC='//TEXT(1:2))
            CALL NJMABT
          ENDIF
          CALL REMARK('SERVICE REGISTERED - '//SVCNAMS(I))
        ELSEIF (RC.EQ.1) THEN
          GOTO 60
        ELSE
          CALL DISPLA('FAILED TO REGISTER SERVICE, RC=',RC)
          CALL NJMABT
        ENDIF

 70   CONTINUE

C     ----------------------------------------------------------------
C
C     ENTER MAIN LOOP. LISTEN FOR INCOMING MESSAGES AND DISPATCH THEM
C     TO SERVICES.
C
 80   CONTINUE
      CALL NJMPOLL(HDR,ACN,RC,5,TA,20)
C
C     RC=0 - MESSAGE RECEIVED
C
      IF (RC.EQ.0) THEN
        CALL NJMRECV(TA,MTYPE,OUSER,ONODE,DUSER,TEXT,TEXTL,RC)
        IF (MTYPE.EQ.'M') THEN
          PRINT 82, OUSER(1:NBLEN(OUSER)),
     +                ONODE(1:NBLEN(ONODE)),
     +                DUSER(1:NBLEN(DUSER)),
     +                TEXTL
 82       FORMAT(' FROM ',A,' AT ',A,' TO ',A,' LEN ',I3)
          PRINT '(1X,A)', TEXT(1:TEXTL)
        ENDIF
        GOTO 80
C
C     RC=1 - NO NETWORK ACTIVITY
C
      ELSEIF (RC.EQ.1) THEN
        GOTO 80
C
C     RC=6 - CONNECTION WITH *NJF* CLOSED
C
      ELSEIF (RC.EQ.6) THEN
        CALL REMARK('CONNECTION ENDED')
        GO TO 90
C
C     RC=9  - NETWORK IS SHUTTING DOWN
C     RC=10 - ALL NETWORK COMMUNICATION ENDED
C
      ELSEIF (RC.EQ.9.OR.RC.EQ.10) THEN
        CALL REMARK('NETWORK SHUTDOWN')
        GO TO 90
      ELSE
        CALL DISPLA('UNRECOGNIZED STATUS ', RC)
        CALL NJMABT
      ENDIF

 90   CONTINUE
      CALL NJMCLOS

      END
      FUNCTION NBLEN(STR)
      IMPLICIT INTEGER (A-Z)
      CHARACTER STR*(*)

      L = LEN(STR)
 10   CONTINUE
      IF (L.GT.0) THEN
        IF (STR(L:L).EQ.' ') THEN
          L = L - 1
          GOTO 10
        ENDIF
      ENDIF

      IF (L.LT.1.AND.LEN(STR).GT.0) L = 1
      NBLEN = L

      END
          IDENT  ARG
          ENTRY  ARG=
 ARG=     BSS    0
          END
