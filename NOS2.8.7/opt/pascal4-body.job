~*
~*  This job builds the Pascal4 product and optionally
~*  inserts it into the PRODUCT and DIRFILE files.
~*
$USER,INSTALL,${../site.cfg:PASSWORDS:INSTALL:INSTALL}.
$NORERUN.
$SETTL,*.
$SETASL,*.
$SETJSL,*.
$COPYBR,INPUT,DIR,2.
* 
*  --------------------------------------  *
*  BUILD THE PASCAL COMPILER AND LIBRARY.  *
*  --------------------------------------  *
* 
*  REQUEST THE TAPE.
* 
$ASSIGN,${2},TAPE,D=GE,F=SI,LB=KU,PO=R. 
* 
*  OBTAIN FILES.
* 
$ATTACH,OPL=OPL871. 
* 
*  DEFINE FILES.
*     PASCAL  = STOCK PASCAL COMPILER.
*     PASCLIB = STOCK PASCAL LIBRARY. 
* 
$PURGE(PASCAL,PASCLIB,PASDOC/NA) 
$DEFINE(PASCAL,PASCLIB,PASDOC) 
* 
*  CREATE OLDPLS. 
* 
$SKIPF(TAPE)
$COPYBF(TAPE,TEMP)
$UPDATE(C=0,F,L=1,N=COLDPL,P=TEMP) PASCAL COMPILER OLDPL
$REWIND(TEMP) 
$COPYBF(TAPE,TEMP)
$UPDATE(C=0,F,L=1,N=LOLDPL,P=TEMP) PASCAL EXTENDED LIBRARY OLDPL
$REWIND(TEMP) 
$COPYBF(TAPE,TEMP)
$UPDATE(C=0,F,L=1,N=UOLDPL,P=TEMP) PASCAL UTILITY PROGRAM OLDPL
* 
*  COPY ERROR MESSAGE TEXTS.
* 
$REWIND(ERRORS) 
$COPYBF(TAPE,ERRORS)
* 
*  CREATE PASTEXT.
* 
$UPDATE(L=1,P=COLDPL,Q) 
$REWIND(PASTEXT)
$COMPASS(A,B=PASTEXT,I,L=0,X=OPL) 
* 
*  PREPARE COMPILER RELOCATABLE BINARY. 
* 
$REWIND(PASCLGO)
$COMPASS(A,B=PASCLGO,I,L=0,G=PASTEXT,S=NOSTEXT) 
$COPYBF(TAPE,PASCLGO) 
* 
*  PREPARE LIBRARY RELOCATABLE BINARY.
* 
$REWIND(ERRORS) 
$REWIND(PLIBLGO)
$COPYBR(ERRORS,PLIBLGO,3) 
$COMPASS(A,B=PLIBLGO,I,L=0,G=PASTEXT,S=NOSTEXT,S=IPTEXT)
$COPYBF(TAPE,PLIBLGO) 
* 
*  CREATE PASCLIB[0]. 
* 
$REWIND(PLIBLGO)
$REWIND(PASCLIB)
$LIBGEN(F=PLIBLGO,P=PASCLIB,N=PASCLIB)
* 
*  CREATE PASCAL[0].
* 
$REWIND(PASCLGO)
$REWIND(PASCAL) 
$LOAD(PASCLGO)
$NOGO(PASCAL) 
* 
*  NOW REGENERATE THE COMPILER AND MINIMAL LIBRARY. 
* 
$UPDATE(F,I=0,L=1,N=0,P=COLDPL) 
* 
*  COPY HISTORY DECK. 
* 
$REWIND(PASHIST)
$COPYBR(COMPILE,PASHIST)
* 
*  PREPARE ERROR TEXT PROCESSOR.
* 
$REWIND(LGO)
PASCAL(I,L=0,PL)
$REWIND(LGO)
$REWIND(INCLGEN)
$LOAD(LGO)
$NOGO(INCLGEN)
* 
*  ASSEMBLE PASCAL-6000 SYSTEM TEXT[2]. 
* 
$REWIND(PASTEXT)
$COMPASS(A,B=PASTEXT,I,L=0,X=OPL) 
* 
*  CREATE PASCAL[2].
* 
$REWIND(LGO)
$COMPASS(A,I,L=0,G=PASTEXT,S=NOSTEXT) 
PASCAL(I,L=0,PL)
$REWIND(LGO)
$REWIND(PASCAL) 
$LOAD(LGO)
$NOGO(PASCAL) 
* 
*  CREATE MINIMAL PASCLIB[2]. 
* 
$REWIND(LGO)
$REWIND(TEMP) 
$COPYBR(COMPILE,TEMP) 
$REWIND(TEMP) 
INCLGEN(TEMP) 
$COMPASS(A,I,L=0,G=PASTEXT,S=NOSTEXT,S=IPTEXT)
PASCAL(I,L=0,PL)
$BKSP(LGO,2)
$COMPASS(A,I,L=0,G=PASTEXT,S=NOSTEXT,S=IPTEXT)
$REWIND(LGO)
$REWIND(PASCLIB)
$LIBGEN(P=PASCLIB,N=PASCLIB)
* 
*  GENERATE FULL PASCAL LIBRARY.
* 
$UPDATE(F,I=0,L=1,N=0,P=LOLDPL) 
* 
*  COPY HISTORY DECK. 
* 
$REWIND(LIBHIST)
$COPYBR(COMPILE,LIBHIST)
* 
*  PROCESS INCLUDE DECKS. 
* 
$REWIND(TEMP) 
$COPYBR(COMPILE,TEMP) 
$REWIND(TEMP) 
$REWIND(LGO)
INCLGEN(TEMP) 
* 
*  COPY MINIMAL PASCLIB[2] RECORDS. 
* 
$RETURN(TEMP) 
$GTR(PASCLIB,TEMP)TEXT/*,REL/*
$REWIND(TEMP) 
$COPYEI(TEMP,LGO) 
* 
*  ADD LIBRARY ROUTINES.
* 
PASCAL(I,L=0,PL)
$BKSP(LGO,2)
PASCAL(I,L=0,PL)
$BKSP(LGO)
$REWIND(TEMP) 
$COPYBR(LGO,TEMP) 
$BKSP(LGO,2)
$REWIND(TEMP) 
$COPYBR(TEMP,LGO) 
$COMPASS(A,I,L=0,G=PASTEXT,S=NOSTEXT) 
PASCAL(I,L=0,PL)
$BKSP(LGO)
$REWIND(TEMP) 
$COPYBR(LGO,TEMP) 
$BKSP(LGO,2)
$REWIND(TEMP) 
$COPYBR(TEMP,LGO) 
$COMPASS(A,I,L=0,G=PASTEXT,S=NOSTEXT,X=OPL) 
$REWIND(LGO)
$REWIND(PASCLIB)
$LIBGEN(P=PASCLIB,N=PASCLIB)
*
*  COPY USER DOCUMENTATION FROM TAPE.
*
$REWIND,TAPE.
$SKIPF(TAPE,9)
$COPYBF(TAPE,PASDOC)
$SKIPF(TAPE)
$COPYBF(TAPE,PASDOC,2)
$SKIPF(TAPE,2)
$COPYBF(TAPE,PASDOC,2)
* 
*  UPDATE FILES.
*       INCLGEN = ERROR TEXT PROCESSOR. 
*       PASHIST = COLDPL MODIFICATION HISTORY.
*       LIBHIST = LOLDPL MODIFICATION HISTORY.
*       PASTEXT = PASCAL SYSTEMS TEXT.
* 
$PURGE(INCLGEN,PASHIST,LIBHIST,PASTEXT/NA)
$SAVE(INCLGEN,PASHIST,LIBHIST,PASTEXT)
* 
*  ---------------------------  *
*  BUILD THE PASCAL UTILITIES.  *
*  ---------------------------  *
*
*  APPLY MODIFICATIONS.
*
$UPDATE(F,L=1,P=UOLDPL,I=0)
*
*  COMPILE ANALYZE.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(ANALYZE)
$PURGE(ANALYZE/NA)
$SAVE(ANALYZE)
*
*  COMPILE AUGMENT.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(AUGMENT)
$PURGE(AUGMENT/NA)
$SAVE(AUGMENT)
*
*  COMPILE COMPARE.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(COMPARE)
$PURGE(COMPARE/NA)
$SAVE(COMPARE)
*
*  COMPILE PASCODE.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(PASCODE)
$PURGE(PASCODE/NA)
$SAVE(PASCODE)
*
*  COMPILE PASCREF.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(PASCREF)
$PURGE(PASCREF/NA)
$SAVE(PASCREF)
*
*  COMPILE PASPPIX.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(PASPPIX)
$PURGE(PASPPIX/NA)
$SAVE(PASPPIX)
*
*  COMPILE PASVERT.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(PASVERT)
$PURGE(PASVERT/NA)
$SAVE(PASVERT)
*
*  COMPILE PRETTY.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(PRETTY)
$PURGE(PRETTY/NA)
$SAVE(PRETTY)
*
*  COMPILE PROSE.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(PROSE)
$PURGE(PROSE/NA)
$SAVE(PROSE)
*
*  COMPILE SPRUCE.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$LOAD(LGO)
$NOGO(SPRUCE)
$PURGE(SPRUCE/NA)
$SAVE(SPRUCE)
*
*  COMPILE WRITE.
*
$REWIND(LGO)
PASCAL(I,L=0,PL)
$COMPASS(I,L=0)
$LOAD(LGO)
$NOGO(WRITE)
$PURGE(WRITE/NA)
$SAVE(WRITE)
*
*  UPDATE PRODUCT AND DIRLOC
*
$IF,$${1}$.NE.$0$,PROD.
  $REWIND,PASCAL,PASCLIB,LGO.
  $COPY,PASCAL,LGO.
  $COPY,PASCLIB,LGO.
  $REWIND,LGO,DIR.
  $ATTACH,PRODUCT,DIRFILE/M=W,WB.
  $LIBEDIT,P=PRODUCT,B=LGO,I=0,C.
  $LIBEDIT,P=DIRFILE,B=DIR,I=0,C.
$ENDIF,PROD.
***
*** PASCAL4 COMPLETE
***
EXIT.
***
*** PASCAL4 FAILED
***
~eor
PASCLIB
*ADD LIB4,ULIB/PASCLIB
~eor
PASCAL
*ADD LIB${1},ABS/PASCAL
~eor
*/
*/  MODS FOR COMPILER INSTALLATION (IF NECESSARY) GO HERE.
*/
*IDENT    CONFIG1 
*DECLARE  HISTORY 
*I HISTORY.10 
* 
* CONFIG1 1985-06-06.        D. J. BIANCHI. 
* 1. DEFINE OPERATING SYSTEM. 
* 2. SET OPERATING SYSTEM NAME. 
* 3. SET LOCAL SITE NAME. 
* 4. CHANGE DEFAULT CHARACTER SET (IF APPROPRIATE). 
* DECKS MODIFIED: COMSPAS, COMP.
*/
*/
*DECLARE  COMSPAS 
*/
*/  SET TARGET OPERATING SYSTEM.
*/
*D V41AC01.3  (COMSPAS.42)
 NOS2     =      1 ;         (* TARGET OPERATING SYSTEM IS NOS 2 *) 
*/
*/
*DECLARE  COMP
*/
*/  SET OSNAME AND SITENAME.
*/
*D COMP.113,COMP.114
*/  ***** INSERT OSNAME AND SITENAME LINES HERE. *****
   OSNAME = 'NOS 2.8.7 '; 
   SITENAME = 'NOSTALGIC COMPUTING CENTER.             '; 
*/
*/  CHANGE DEFAULT CHARACTER SET (IF APPROPRIATE).
*/
*/        END OF MODSET "CONFIG1".
~eor
*/
*/  MODS FOR LIBRARY INSTALLATION (IF NECESSARY) GO HERE. 
*/
*IDENT    NOS2DSP 
*DECLARE  HISTORY 
*I HISTORY.10 
* 
* NOS2DSP 1984-10-18.        L. H. DAASCH.
*         1985-04-19.        D. J. BIANCHI. 
* MODIFY DSP INCLUDE PACKAGE FOR NOS 2. 
* DECKS MODIFIED:  NOSINCL. 
*/
*DECLARE  NOSINCL 
*I HNOSINC.3
* MODIFY DSP INCLUDE PACKAGE FOR NOS 2. 
*D V41CL09.21  (NOSINCL.228)
     NOSFUJN, 
*D V41CL09.31  (NOSINCL.228)
     NOSFLID, 
*D V41CL09.53  (NOSINCL.228)
      S      : BOOLEAN; 
*D V41CL09.57,V41CL09.58  (NOSINCL.228) 
      SLID   : PACKED ARRAY[1..3] OF CHAR;
      DLID   : PACKED ARRAY[1..3] OF CHAR;
*D V41CL09.61,V41CL09.62  (NOSINCL.228) 
      UJN    : PACKED ARRAY[1..7] OF CHAR;
      PAD3   : 0..77B;
*D V41CL09.66  (NOSINCL.228)
      SVC    : PACKED ARRAY[1..2] OF CHAR;
*D V41CL09.68,V41CL09.69  (NOSINCL.228) 
      PAD4   : 0..177B; 
*D V41CL09.71  (NOSINCL.228)
      PAD5   : 0..7777B;
*D V41CL09.73  (NOSINCL.228)
      PAD6   : INTEGER; 
*D V41CL09.75  (NOSINCL.228)
      PAD7   : INTEGER; 
*D V41CL09.77,V41CL09.79  (NOSINCL.228) 
      DD     : PACKED ARRAY[1..2] OF CHAR;
      PAD8   : 0..7777777777B;
      EFLAGS : 0..777777B;
*D V41CL09.81  (NOSINCL.228)
      PAD9   : PACKED ARRAY[1..7] OF CHAR;
      PAD10  : 0..777777B;
*D V41CL09.83  (NOSINCL.228)
      PAD11  : PACKED ARRAY[1..7] OF CHAR;
      ERTADD : 0..777777B;

      PAD12  : ARRAY[12B..15B] OF INTEGER;
*D V41CL09.85  (NOSINCL.228)
      INST   : INTEGER
*/        END OF MODSET "NOS2DSP".
*IDENT    NOS2LFM 
*DECLARE  HISTORY 
*I HISTORY.10 
* 
* NOS2LFM 1984-04-07.        CARSTEN KOCH.
*         1985-06-06.        D. J. BIANCHI. 
*         1985-11-18.        JIM MINER. 
* YANK NOS 1 DECKS. 
* MODIFY LFM INCLUDE PACKAGE FOR NOS 2. 
*  1. ADAPT FNTENTRY TO NOS 2 FORMAT B. 
*  2. CHANGE SETID TO SETFS, FILEID TO FILESC.
* DECKS MODIFIED: NOSINCL.
* DECKS YANKED: FILEID, SETID.
*/
*DECLARE
*YANKDECK FILEID,SETID
*/
*DECLARE  NOSINCL 
*I HNOSINC.3
* MODIFY LFM INCLUDE PACKAGE FOR NOS 2. 
*D NOSINCL.22,NOSINCL.25
  FILETYPE     = (U0FILE, U1FILE, U2FILE, U3FILE, U4FILE, 
                  U5FILE, U6FILE, ROFILE, LIFILE, PTFILE, 
                  PMFILE, FAFILE, SYFILE, LOFILE, U16FILE,
                  INFILE, QFFILE);
  FILEACCESS   = (READMODE, WRITEMODE, MODIFYMODE, APPENDMODE,
                  EXECUTEMODE, READMODIFYMODE, READAPPENDMODE); 
*D NOSINCL.28 
  FILESTATUS = 0 .. 77B;
*D NOSINCL.36,NOSINCL.40
      ACCESSLEVEL    : 0..7;
      RESIDENCE      : 0..3;
*D NOSINCL.43,NOSINCL.56
      STATUS         : 0..77B;
      LENGTH         : 0..77777777B;
      POSITION       : 0..77777777B;
      UNUSED1        : 0..17B;
      MODE           : 0..17B;
      READSTATUS     : 0..7B; 
*D NOSINCL.58 
*D V41CL04.9  (NOSINCL.63)
FUNCTION FILESC(FN : ALFA) : FILESTATUS;
*D V41CL04.32  (NOSINCL.121)
PROCEDURE SETFS(FN : ALFA; ST : FILESTATUS);
*/        END OF MODSET "NOS2LFM".
*IDENT    NOS2PFM 
*DECLARE  HISTORY 
*I HISTORY.10 
* 
* NOS2PFM 1984-04-07.        CARSTEN KOCH.
*         1985-04-19.        D. J. BIANCHI. 
* CONVERT PFM TO NOS 2: ADD NEW PROCESSING OPTIONS XD, XT.
* DECKS MODIFIED: NOSLIB. 
*/
*/
*DECLARE  NOSLIB
*I HNOSLIB.3
* CONVERT PFM TO NOS 2: ADD NEW PROCESSING OPTIONS XD, XT.
*D NOSLIB.114 
  OPXD   = 17          (* XD OPTION *); 
  OPXT   = 18          (* XT OPTION *); 
  OPMAX  = 19          (* LAST OPTION + 1 *); 
*D NOSLIB.377 
     'DF     ', 'XD     ', 'XT     ', '       '); 
*I NOSLIB.398 
    (* XD *)  [PFMCCCG,PFMCCDF,PFMCCSV,PFMCCPM],
    (* XT *)  [PFMCCCG,PFMCCDF,PFMCCSV,PFMCCPM],
*I NOSLIB.931 
              (* XT: FILE PASSWORD EXPIRATION TIME *) 
              EXP := NUMOPTION(OPXT,7777B); 
              (* XD: FILE PASSWORD EXPIRATION DATE *) 
              IF OPTIONLIST[OPXD] <> ZEROCH7 THEN 
                BEGIN NAME := OPTIONLIST[OPXD]; 
                  FOR I := 1 TO 6 DO
                    IF NOT (NAME[I] IN ['0'..'9']) THEN 
                      HALT(' PFM : INVALID EXPIRATION DATE.');
                  Y := 10 * DIGIT(NAME[1]) + DIGIT(NAME[2]);
                  M := 10 * DIGIT(NAME[3]) + DIGIT(NAME[4]);
                  D := 10 * DIGIT(NAME[5]) + DIGIT(NAME[6]);
                  IF (Y >= 83) AND (M IN [1..12]) AND (D IN [1..31])
                  THEN EXP := 10000B * (Y - 70) + 100B * M + D
                  ELSE HALT(' PFM : INVALID EXPIRATION DATE.')
                END;
*/        END OF MODSET "NOS2PFM".
~eor
*/
*/  MODS TO THE UTILITIES CAN BE INSERTED HERE. 
*/
~eor
*COMPILE PASTEXT,EOR2 
*COMPILE COMPOVL,COMPRTN,EOR4 
*COMPILE PSYSTM.REC 
*COMPILE ZFN.WRS
~eor
          IDENT  HELPTXT
          STEXT 
          PURGMAC ##DEF## 
          MACRO  ##DEF##,N,V
 .1 MICRO 2,,$N$
 ".1" EQU V 
 ##DEF##    ENDM
          PURGMAC  BSSN 
          MACRO  BSSN,T,N 
.1 IFC EQ,*T*BEGIN* 
  LOC N 
.3 SKIP 
.1 ENDIF
.2 IFC EQ,*T*END* 
  LOC *O
.3 SKIP 
.2 ENDIF
  IFC NE,*T**,1 
T EQU * 
  LOC *+N 
.3 ENDIF
  ENDM
 MACREF   OPSYN  NIL
 QUAL     OPSYN  NIL
 MPAR     OPSYN  NIL
 PARAM    OPSYN  NIL
 ENDX     OPSYN  NIL
          END 
~eor
          IDENT  EXTRACT
          ENTRY  EXTRACT
          SYSCOM B1 
          TITLE  EXTRACT - EXTRACT CTEXT DECKS. 
 CONST    SPACE  4,10 
****      ASSEMBLY CONSTANTS. 

 IBUFL    EQU    10001B 
 OBUFL    EQU    10001B 
 LINEL    EQU    15 

****
 FETS     SPACE  4,10 
 I        FILEB  IBUF,IBUFL 
 O        FILEB  OBUF,OBUFL 
 TKW      SPACE  4,10 
 TKWS     BSS    0           KEYWORD TABLE - SKIPPING 
          VFD    36/0HCTEXT,6/0,18/EXT6    FIND CTEXT 
          VFD    36/0HTITLE,6/0,18/EXT6    FIND TITLE 
          VFD    36/0,6/0,18/EXT2          DELETE ALL OTHERS
  
 TKWC     BSS    0           KEYWORD TABLE - COPYING
          VFD    36/0HMACREF,6/0,18/EXT2   DELETE 
          VFD    36/0HQUAL,6/0,18/EXT2     DELETE 
          VFD    36/0HMPAR,6/0,18/EXT2     DELETE 
          VFD    36/0HPARAM,6/0,18/EXT2    DELETE 
          VFD    36/0HSPACE,6/0,18/EXT2    DELETE 
          VFD    36/0HLIST,6/0,18/EXT2     DELETE 
          VFD    36/0HTITLE,6/0,18/EXT2    DELETE 
          VFD    36/0HENDX,6/0,18/EXT7     FIND ENDX
          VFD    36/0HCTEXT,6/0,18/EXT5    FIND CTEXT 
          VFD    36/0,6/0,18/EXT8          COPY ALL OTHERS
 EXTRACT  SPACE  4,10 
 EXTRACT  SB1    1
          REWIND I
          READEI I
          MX0    36 
 EXT1     SA0    TKWS-1      KEYWORD TABLE - SKIPPING 
 EXT2     READC  I,LINE,LINEL  READ LINE
          NZ     X1,EXT9     IF EOI 
          SA1    LINE 
          MX2    12 
          BX3    -X2*X1 
          ZR     X3,EXT2     IF BLANK LINE
          MX2    6
          BX3    X1*X2
          LX3    6
          SX4    X3-1R* 
          ZR     X4,EXT2     IF COMMENT LINE
          SA2    LINE+1      GET KEYWORD
          BX1    X0*X2
          RJ     =XSFN=      SPACE FILL NAME
          BX6    X0*X6       GET FIRST SEVEN CHARACTERS 
          SA1    A0 
 EXT3     SA1    A1+B1       GET NEXT ENTRY 
          BX2    X0*X1       EXTRACT NAME 
          ZR     X2,EXT4     IF END OF TABLE
          BX1    -X0*X1      EXTRACT JUMP ADDRESS 
          BX3    X2-X6
          NZ     X3,EXT3     IF NO MATCH
 EXT4     SB2    X1          JUMP TO PROCESSOR
          JP     B2 
  
*         CTEXT FOUND DURING COPYING. 
  
 EXT5     WRITEW O,(=C*          END*),2
  
*         CTEXT FOUND DURING SKIPPING.
  
 EXT6     SA0    TKWC-1      KEYWORD TABLE - COPYING
          SA2    LINE+1      REPLACE *CTEXT* BY *IDENT* 
          BX2    -X0*X2 
          SA3    =7LIDENT 
          BX6    X2+X3
          SA6    A2 
          MESSAGE A2,1       DISPLAY LINE 
          WRITEC O,LINE      WRITE MODIFIED LINE
          WRITEW O,EXTA,EXTAL WRITE STEXT AND SST 
          JP     EXT2        LOOP 
  
*         ENDX FOUND. 
  
 EXT7     WRITEW O,(=C*          END*),2
          JP     EXT1        START SKIPPING 
  
*         COPY UNIDENTIFIED LINE. 
  
 EXT8     WRITEC O,LINE 
          JP     EXT2        LOPP 
  
*         EOI ENCOUNTERED.
  
 EXT9     WRITER O           FLUSH BUFFER 
          REWIND O
          MESSAGE =0,1       CLEAR MESSAGE
          ENDRUN
  
  
 EXTA     DATA   C*          STEXT* 
          DATA   C*          SST* 
 EXTAL    EQU    *-EXTA 
 BUFFERS  SPACE  4,10 
*         BUFFERS.
  
  
 LINE     BSS    LINEL+1
 IBUF     BSS    IBUFL+1
 OBUF     BSS    OBUFL+1
          END    EXTRACT
~eor
(*$U+,A+,L'CVSTEXT - CONVERT SYSTEM TEXT.'     *) 



PROGRAM CVSTEXT(STEXT,SOURCE,OUTPUT); 
(*$L'DOCUMENTATION.'




***       CVSTEXT - CONVERT SYSTEM TEXT.
* 
*         CARSTEN KOCH,      1983-03-01.
* 
*         COPYRIGHT (C) 1983. 




***       MODIFICATION HISTORY. 
* 
*         D. J. BIANCHI,     1984-06-10.
*         MAKE INCLUDE PACKAGES COMPLETE: ADD "CONST" TO EACH.




***       PURPOSE.
* 
*         CVSTEXT CONVERTS A SYSTEM TEXT FILE FROM COMPASS OVERLAY
*         FORMAT TO PASCAL TEXT FORMAT. 
*         CVSTEXT GENERATES NUMERIC CONSTANTS FOR ALL SYSTEM SYMBOLS
*         AND STRING CONSTANTS FOR ALL NON-NULL MICROS WITH SYMBOLIC
*         NAMES THAT ARE SHORTER THAN 8 CHARACTERS. 
*         THE CONSTANT NAME IS THE ORIGINAL SYMBOL NAME PRECEDED BY 
*         THE RECORD NAME AS A QUALIFIER.  IF THE CONSTANT DEFINES A
*         MICRO, THE NAME IS ALSO POSTFIXED WITH THE STRING *MIC*.
*         THE REST OF THE SYSTEM TEXT OVERLAY (MACROS ETC) IS IGNORED.
*         IF THE RECORD NAME STARTS WITH THE CHARACTERS *COMS* OR 
*         ENDS WITH THE CHARACTERS *TEXT*, THEY WILL BE REMOVED BEFORE
*         USING THE NAME AS A QUALIFIER.  IF THE RESULTING QUALIFIER
*         STARTS WITH A DIGIT, IT WILL BE PREFIXED WITH AN *S*. 




***       CONTROL STATEMENT CALL. 
* 
*         CVSTEXT(LFN1,LFN2)
* 
*         LFN1   NAME OF FILE CONTAINING THE SYSTEM TEXT OVERLAY(S).
*                DEFAULT = STEXT. 
*                LFN1 IS PROCESSED FROM *BOI* TO *EOF*. 
* 
*         LFN2   NAME OF SOURCE FILE TO BE GENERATED. 
*                DEFAULT = SOURCE.
*                LFN2 WILL BE WRITTEN FROM ITS CURRENT POSITION AND 
*                RECEIVES ONE TEXT RECORD PER OVERLAY PROCESSED.




****      DAYFILE MESSAGES. 
* 
*         * SYSTEM TEXT RECORD TOO SHORT.* = AN END-OF-RECORD WAS 
*                DETECTED BEFORE ALL REQUIRED DATA WERE PROCESSED.
* 
*         * SYSTEM TEXT FILE EMPTY.* = THE SYSTEM TEXT FILE (LFN1)
*                DOES NOT EXIST OR DOES NOT CONTAIN ANY DATA. 
* 
*         * PREFIX TABLE MISSING.* = THE SYSTEM TEXT RECORD DOES NOT
*                START WITH A 7700 PREFIX TABLE.
* 
*         * PREFIX TABLE LENGTH ERROR.* = THE PREFIX TABLE IS NOT 
*                16B WORDS LONG.
* 
*         * RECORD NOT SYSTEM TEXT OVERLAY.* = THE RECORD IS NOT A
*                (1,1) OVERLAY TYPE RECORD. 
* 
*         * SYSTEM SYMBOL TABLE TOO LONG.* = THE SYSTEM SYMBOL TABLE
*                IS MORE THAN 177777B WORDS LONG. 
* 
*         * SYSTEM TABLE LENGTH NOT EVEN.* = THE SYSTEM TABLE HAS A 
*                WORD COUNT THAT IS ODD.
* 
*         * MICRO DEFINITIONS TABLE TOO LONG.* = THE MICRO DEFINITIONS
*                TABLE IS LONGER THAT *MAXMIC*.  EVENTUALLY INCREASE
*                *MAXMIC* AND RE-INSTALL CVSTEXT. 
* 
*         * MICRO TABLE ENTRY LENGTH ERROR.* = THE MICRO DEFINITIONS
*                TABLE CONTAINS AN ENTRY WITH AN INCORRECT WORD COUNT.




****      CREATION OF ABSOLUTE BINARY CODE. 

          USE THE FOLLOWING CONTROL STATEMENT TO CREATE 
          AN ABSOLUTE BINARY VERSION OF *CVSTEXT* - 

$LAP,     PA(CVSTEXT,MO=S)

****

*)
(*$L'MAIN PROGRAM - DECLARATIONS.'     *) 


CONST 
   MAXMIC = 10000;            (* MAXIMUM MICRO TABLE LENGTH *)



TYPE
    B12        = 0..7777B;
    B21        = 0..7777777B; 
    B39        = 0..7777777777777B; 
    CH7        = PACKED ARRAY[1..7] OF CHAR;
    CH10       = PACKED ARRAY[1..10] OF CHAR; 
    CH20       = PACKED ARRAY[1..20] OF CHAR; 
    X10        = 0..10; 
    WORDFORMAT = (CH10F,BY5F,B21F); 
    WORD       = PACKED RECORD CASE WORDFORMAT OF 
                    CH10F: (CH10V: CH10); 
                    BY5F:  (BY5V: PACKED ARRAY[0..4] OF B12); 
                    B21F:  (D1: B39; B21V: B21) 
                 END; 


VAR 
   STEXT:  SEGMENTED FILE OF WORD;
   SOURCE: SEGMENTED TEXT;
   W:      WORD;
   RNAME:  CH7; 
   RNAMELEN: 0..7;
   MSG:    CH20;
   CONSTWRITTEN: BOOLEAN; 

VALUE 
   MSG = ' CONVERTING XXXXXXX.';
(*$L'COMMON UTILITY PROCEDURES.'       *) 




PROCEDURE NEXTWORD; 


BEGIN 
   IF EOS(STEXT)
   THEN HALT(' SYSTEM TEXT RECORD TOO SHORT.'); 
   READ(STEXT,W)
END (* NEXTWORD *); 




PROCEDURE WRITESYMBOLNAME;



VAR 
   I: 3..10;
   CH: CHAR;



BEGIN 
   IF NOT CONSTWRITTEN
   THEN BEGIN 
      WRITELN(SOURCE,'CONST');
      CONSTWRITTEN := TRUE
   END; 
   WRITE(SOURCE,RNAME: RNAMELEN); 
   FOR I:= 3 TO 10 DO 
   BEGIN
      CH:= W.CH10V[I];
      IF CH <> CHR(0) 
      THEN BEGIN
         IF CH IN ['A'..'Z','0'..'9'] 
         THEN WRITE(SOURCE,CH)
         ELSE WRITE(SOURCE,'C',CHR(ORD('0')+ORD(CH) DIV 10B), 
                               CHR(ORD('0')+ORD(CH) MOD 10B)) 
      END 
   END
END (* WRITESYMBOLNAME *);
(*$L'MAIN PROCEDURES.'       *) 




PROCEDURE INITIALIZE; 



BEGIN 
   RESET(STEXT);
   IF EOF(STEXT) THEN HALT(' SYSTEM TEXT FILE EMPTY.'); 
END (* INITIALIZE *); 




PROCEDURE PREFIXTABLE;



VAR 
   I: 1..16B; 



BEGIN 
   NEXTWORD;
   IF W.BY5V[0] <> 7700B THEN HALT(' PREFIX TABLE MISSING.'); 
   IF W.BY5V[1] <> 16B THEN HALT(' PREFIX TABLE LENGTH ERROR.');
   NEXTWORD;
   RNAME:= '       '; 
   RNAMELEN:= 0;
   FOR I:= 1 TO 7 DO
   WITH W DO
   IF CH10V[I] <> CHR(0)
   THEN BEGIN 
      RNAME[I]:= CH10V[I];
      MSG[RNAMELEN+13]:= CH10V[I];
      RNAMELEN:= RNAMELEN+1 
   END; 
   MSG[RNAMELEN+13]:= '.';
   FOR I:= RNAMELEN+1 TO 7 DO MSG[I+13]:= ' ';
   MESSAGE(MSG,1);
   WRITELN(SOURCE,RNAME: RNAMELEN); 
   FOR I:= 1 TO 16B DO NEXTWORD;
   IF (W.BY5V[0] <> 5000B) OR (W.BY5V[1] <> 0101B)
   THEN HALT(' RECORD NOT SYSTEM TEXT OVERLAY.'); 
END (* PREFIXTABLE *);
  
  
  
  
PROCEDURE REMOVECOMSTEXT; 
  
  
  
BEGIN 
   IF RNAMELEN > 4
   THEN BEGIN 
      IF (RNAME[RNAMELEN-3] = 'T') AND
         (RNAME[RNAMELEN-2] = 'E') AND
         (RNAME[RNAMELEN-1] = 'X') AND
         (RNAME[RNAMELEN]   = 'T')
      THEN RNAMELEN:= RNAMELEN - 4
      ELSE IF (RNAME[1] = 'C') AND
              (RNAME[2] = 'O') AND
              (RNAME[3] = 'M') AND
              (RNAME[4] = 'S')
            THEN BEGIN
               RNAME[1]:= RNAME[5]; 
               RNAME[2]:= RNAME[6]; 
               RNAME[3]:= RNAME[7]; 
               RNAMELEN:= RNAMELEN - 4
            END 
   END; 
   IF RNAME[1] IN ['0'..'9']
   THEN BEGIN 
      RNAME[7]:= RNAME[6];
      RNAME[6]:= RNAME[5];
      RNAME[5]:= RNAME[4];
      RNAME[4]:= RNAME[3];
      RNAME[3]:= RNAME[2];
      RNAME[2]:= RNAME[1];
      RNAME[1]:= 'S'; 
      IF RNAMELEN < 7 THEN RNAMELEN:= RNAMELEN + 1
   END
END (* REMOVECOMSTEXT *); 
  
  
  
  
PROCEDURE SYSTEMSYMBOLTABLE;
  
  
  
VAR 
   L: B21;
  
  
  
BEGIN 
   NEXTWORD;
   IF (W.D1 <> 0) OR (W.B21V >= 200000B)
   THEN HALT(' SYSTEM SYMBOL TABLE TOO LONG.'); 
   L:= W.B21V;
   IF ODD(L)
   THEN HALT(' SYSTEM SYMBOL TABLE LENGTH NOT EVEN.');
   FOR L:= 1 TO L DIV 2 DO
   BEGIN (* PROCESS A SYMBOL *) 
      NEXTWORD; 
      WRITESYMBOLNAME;
      NEXTWORD; 
      WRITELN(SOURCE,'=',W.B21V: 1,';') 
   END
END (* SYSTEMSYMBOLTABLE *);
  
  
  
PROCEDURE MICRODEFINITIONS; 
  
  
  
VAR 
   MICTAB: ARRAY[0..MAXMIC] OF WORD;
   L: 0..MAXMIC;
   E: 0..MAXMIC;
   I: 1..MAXMIC;
  
  
  
PROCEDURE WRITEMICVAL(LAST: X10); 
  
  
  
VAR 
   I: X10;
   CH: CHAR;
  
  
  
BEGIN 
   FOR I:= 1 TO LAST DO 
   WITH W DO
   BEGIN
      CH:= CH10V[I];
      IF CH = ''''
      THEN WRITE(SOURCE,'''''') 
      ELSE WRITE(SOURCE,CH) 
   END
END (* WRITEMICVAL *);
  
  
  
BEGIN 
   NEXTWORD;
   IF (W.D1 <> 0) OR (W.B21V > MAXMIC)
   THEN HALT(' MICRO DEFINITIONS TABLE TOO LONG.'); 
   L:= W.B21V;
   FOR I:= 1 TO L DO
   BEGIN
      NEXTWORD; 
      MICTAB[I]:= W 
   END; 
   WHILE (L > 0) AND (MICTAB[L].CH10V <> 'PEPCOMMENT') DO 
   BEGIN
      W:= MICTAB[L];
      IF (W.BY5V[0] < 2001B) OR (W.BY5V[0]-2000B > MAXMIC)
      THEN HALT(' MICRO TABLE ENTRY LENGTH ERROR.');
      E:= W.BY5V[0]-2000B;
      L:= L-E;
(*        MICRO STRING MUST NOT BE EMPTY AND               *) 
(*        MICRO NAME MUST BE < 8 CHARACTERS.               *) 
      IF (E > 1) AND (W.CH10V[3] = CHR(0))
      THEN BEGIN
         WRITESYMBOLNAME; 
         WRITE(SOURCE,'MIC=''');
         FOR I:= L+1 TO L+E-2 DO
         BEGIN
            W:= MICTAB[I];
            WRITEMICVAL(10) 
         END; 
         W:= MICTAB[L+E-1]; 
         WRITEMICVAL(ORD(W.CH10V[10])); 
         WRITELN(SOURCE,''';')
      END 
   END
END (* MICRODEFINITIONS *); 
(*$L'MAIN PROGRAM CVSTEXT.'            *) 




BEGIN 
   INITIALIZE;
   REPEAT 
      PREFIXTABLE;
      REMOVECOMSTEXT; 
      WRITELN(SOURCE,'(*$L- BEGIN ',RNAME:RNAMELEN,' DEFINITIONS.*)');
      CONSTWRITTEN := FALSE;
      SYSTEMSYMBOLTABLE;
      MICRODEFINITIONS; 
      WRITELN(SOURCE,'(*$L= END ',RNAME: RNAMELEN,' DEFINITIONS.*)'); 
      GETSEG(STEXT);
      PUTSEG(SOURCE)
   UNTIL EOF(STEXT);
   MESSAGE(' CVSTEXT COMPLETE.')
END.
