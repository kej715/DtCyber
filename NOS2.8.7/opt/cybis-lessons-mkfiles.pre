#!/usr/bin/env node

const DEBUG = false;

const DtCyber  = require("../../automation/DtCyber");
const Terminal = require("../../automation/Terminal");

const dtc  = new DtCyber();
const term = new Terminal.CybisTerminal();

const keyInterval = 250;

const send = s => {
  for (let i = 0; i < s.length; i++) {
    let key = s.charAt(i);
    let cc = s.charCodeAt(i);
    let isShift = false;
    let isCtrl = false;
    if (cc < 0x20) {
      switch (cc) {
      case 0x08:
        key = "Backspace";
        break;
      case 0x09:
        key = "Tab";
        break;
      case 0x0d:
        key = "Enter";
        break;
      case 0x1b:
        key = "Escape";
        break;
      default:
        key = String.fromCharCode(cc + 0x60);
        isCtrl = true;
        break;
      }
    }
    else if (cc >= 0x41 && cc <= 0x5a) {
      isShift = true;
    }
    else if (cc === 0x7f) {
      key = "Delete";
    }
    term.sendKeyDirect(key, isShift, isCtrl, false, (key === "Enter") ? keyInterval * 4 : keyInterval);
  }
};

const cybdevpat = [
  { re: /currently being edited/, fn: "Account is being edited by someone else" },
  { re: /Account last changed on/, fn: () => { term.log("Account last changed"); send("\r\r"); return true; } },
  { re: /ACCOUNT EDITOR/, fn: () => { term.log("account editor"); send("\r"); return true; } },
  { re: /File management options/, fn: () => { term.log("File management options"); send("1"); return true; } },
  { re: /Select new file type/, fn: () => { term.log("Select new file type"); return false; } }
];
/* make a normal PLATO group the short way */
const makegroup = (name, author, masterfile, parts, names) => {
  const grouppat = [
    { re: /File management options/, fn: () => { term.log("File management options"); send("1"); return true; } },
    { re: /Enter new file name/, fn: () => { term.log(`makegroup name = ${name}`); send(`${name}\r`); return true; } },
    { re: /Already a file with this name/, fn: () => { term.log(`${name} already exists`); send("\x02"); return false; } },
    { re: /Enter masterfile/, fn: () => { term.log(`makegroup masterfile = ${masterfile}`); send(`${masterfile}\r`); return true; } },
    { re: /Allow author records/, fn: () => { term.log(`makegroup author = ${author}`); send(`${author}`); return true; } },
    { re: /Press DATA to enter/, fn: () => { term.log("makegroup sent DATA key"); send("\x04"); return true; } },
    { re: /Enter number of parts/, fn: () => { term.log(`makegroup parts = ${parts}`); send(`${parts}\r`); return true; } },
    { re: /Enter number of names/, fn: () => { term.log(`makegroup names = ${names}`); send(`${names}\r`); return true; } },
    { re: /Press NEXT to proceed/, fn: () => { term.log("makegroup press NEXT to proceed"); send("\r"); return true; } },
    { re: /File created/, fn: () => { term.log("makegroup File created pressing NEXT"); send("\r"); return true; } },
    { re: /Disk pack not loaded/, fn: `Disk pack not loaded for masterfile ${masterfile}` },
    { re: /Select new file type/ }
  ];
  return term.send("c")
  .then(() => term.expect(grouppat))
  .then(() => term.sleep(2000));
}

/* make a normal PLATO group the long way */
const makegroup_long = (name, masterfile, author, signons, datasignons, datarecords) => {
  const grouppat = [
    { re: /File management options/, fn: () => { term.log("File management options"); send("1"); return true; } },
    { re: /Enter new file name/, fn: () => { term.log(`makegroup_long name = ${name}`); send(`${name}\r`); return true; } },
    { re: /Already a file with this name/, fn: () => { term.log(`${name} already exists`); send("\x02"); return false; } },
    { re: /Enter masterfile/, fn: () => { term.log(`makegroup_long masterfile = ${masterfile}`); send(`${masterfile}\r`); return true; } },
    { re: /Allow author records/, fn: () => { term.log(`makegroup_long author = ${author}`); send(`${author}`); return true; } },
    { re: /Press DATA to enter/, fn: () => { term.log(`makegroup_long signons = ${signons}`); send(`${signons}\r`); return true; } },
    { re: /-of data signons/, fn: () => { term.log(`makegroup_long datasignons = ${datasignons}`); send(`${datasignons}\r`); return true; } },
    { re: /-of data records and/, fn: () => { term.log(`makegroup_long datarecords = ${datarecords}`); send(`${datarecords}\r`); return true; } },
    { re: /Press NEXT to proceed/, fn: () => { term.log("makegroup_long press NEXT to proceed"); send("\r"); return true; } },
    { re: /File created/, fn: () => { term.log("makegroup_long File created pressing NEXT"); send("\r"); return true; } },
    { re: /Disk pack not loaded/, fn: `Disk pack not loaded for masterfile ${masterfile}` },
    { re: /Select new file type/ }
  ];
  return term.send("c")
  .then(() => term.expect(grouppat))
  .then(() => term.sleep(2000));
}

/* make a PLM group */
const makePLMgroup = (name, masterfile, parts, names) => {
  const grouppat = [
    { re: /File management options/, fn: () => { term.log("File management options"); send("1"); return true; } },
    { re: /Enter new file name/, fn: () => { term.log(`makePLMgroup name = ${name}`); send(`${name}\r`); return true; } },
    { re: /Already a file with this name/, fn: () => { term.log(`${name} already exists`); send("\x02"); return false; } },
    { re: /Enter masterfile/, fn: () => { term.log(`makePLMgroup masterfile = ${masterfile}`); send(`${masterfile}\r`); return true; } },
    { re: /Use PLMROUTER or/, fn: () => { term.log("makePLMgroup sending p key"); send("p"); return true; } },
    { re: /Enter number of parts/, fn: () => { term.log(`makePLMgroup parts = ${parts}`); send(`${parts}\r`); return true; } },
    { re: /Enter number of names/, fn: () => { term.log(`makePLMgroup names = ${names}`); send(`${names}\r`); return true; } },
    { re: /Press NEXT to proceed/, fn: () => { term.log("makePLMgroup Press NEXT to proceed"); send("\r"); return true; } },
    { re: /File created/, fn: () => { term.log("makePLMgroup File created pressing NEXT"); send("\r"); return true; } },
    { re: /Disk pack not loaded/, fn: `Disk pack not loaded for masterfile ${masterfile}` },
    { re: /Select new file type/ }
  ];
  return term.send("m")
  .then(() => term.expect(grouppat))
  .then(() => term.sleep(2000));
}

/* make an instructor file */
const makeinstructor = (name, masterfile, parts) => {
  const instpat = [
    { re: /File management options/, fn: () => { term.log("File management options"); send("1"); return true; } },
    { re: /Enter new file name/, fn: () => { term.log(`makeinstructor name = ${name}`); send(`${name}\r`); return true; } },
    { re: /Already a file with this name/, fn: () => { term.log(`${name} already exists`); send("\x02"); return false; } },
    { re: /Enter masterfile/, fn: () => { term.log(`makeinstructor masterfile = ${masterfile}`); send(`${masterfile}\r`); return true; } },
    { re: /Enter number of parts/, fn: () => { term.log(`makeinstructor parts = ${parts}`); send(`${parts}\r`); return true; } },
    { re: /File created/, fn: () => { term.log("makeinstructor File created pressing NEXT"); send("\r"); return true; } },
    { re: /Disk pack not loaded/, fn: `Disk pack not loaded for masterfile ${masterfile}` },
    { re: /Select new file type/ }
  ];
  return term.send("e")
  .then(() => term.expect(instpat))
  .then(() => term.sleep(2000));

}

/* make PLM curriculum */
const makePLMcurriculum = (name, masterfile, parts) => {
  const PLMcurpat = [
    { re: /File management options/, fn: () => { term.log("File management options"); send("1"); return true; } },
    { re: /Enter new file name/, fn: () => { term.log(`makePLMcurriculum name = ${name}`); send(`${name}\r`); return true; } },
    { re: /Already a file with this name/, fn: () => { term.log(`${name} already exists`); send("\x02"); return false; } },
    { re: /Enter masterfile/, fn: () => { term.log(`makePLMcurriculum masterfile = ${masterfile}`); send(`${masterfile}\r`); return true; } },
    { re: /Enter number of parts/, fn: () => { term.log(`makePLMcurriculum parts = ${parts}`); send(`${parts}\r`); return true; } },
    { re: /File created/, fn: () => { term.log("makePLMcurriculum File created pressing NEXT"); send("\r"); return true; } },
    { re: /Disk pack not loaded/, fn: `Disk pack not loaded for masterfile ${masterfile}` },
    { re: /Select new file type/ }
  ];
  return term.send("n")
  .then(() => term.expect(PLMcurpat))
  .then(() => term.sleep(2000));
}

/* make code file */
const makecode = (name, masterfile, parts) => {
  const codepat = [
    { re: /File management options/, fn: () => { term.log("File management options"); send("1"); return true; } },
    { re: /Enter new file name/, fn: () => { term.log(`makecode name = ${name}`); send(`${name}\r`); return true; } },
    { re: /Already a file with this name/, fn: () => { term.log(`${name} already exists`); send("\x02"); return false; } },
    { re: /Enter masterfile/, fn: () => { term.log(`makecode masterfile = ${masterfile}`); send(`${masterfile}\r`); return true; } },
    { re: /Enter number of parts/, fn: () => { term.log(`makecode parts = ${parts}`); send(`${parts}\r`); return true; } },
    { re: /File created/, fn: () => { term.log("makecode File created pressing NEXT"); send("\r"); return true; } },
    { re: /Disk pack not loaded/, fn: `Disk pack not loaded for masterfile ${masterfile}` },
    { re: /Select new file type/ }
  ];
  return term.send("k")
  .then(() => term.expect(codepat))
  .then(() => term.sleep(2000));
}
if (DEBUG) {
  term.setDebug(true);
}
term.setKeyInterval(keyInterval);
const ipAddress = dtc.getHostIpAddress();
term.connect(`${ipAddress}:8005`)
  .then(() => term.say("Connected"))
  .then(() => term.say("Login ..."))
  .then(() => term.login("admin", "s", "passme"))
  .then(() => term.say("logged in"))
  .then(() => term.sleep(2000))
  .then(() => term.sendKey("h", false, true, false))
  .then(() => term.expect([{ re: /AUTHOR MODE/ }]))
  .then(() => term.sleep(1000))
  .then(() => term.send("\r"))
  .then(() => term.expect([{ re: /SYSTEM MODE.*Choose a lesson.*HELP available/ }]))
  .then(() => term.say("system login detected"))
  .then(() => term.sleep(2000))
  .then(() => term.send("cybdeva\r"))
  .then(() => term.expect(cybdevpat))
  .then(() => term.say("ready to create files"))
  .then(() => makegroup_long("cnos", "system", "n", "20", "20", "20"))
  .then(() => makegroup("compass", "n", "system", "1", "15"))
  .then(() => makePLMgroup("cppu", "system", "1", "5"))
  .then(() => makePLMgroup("ccrm", "system", "2", "5"))
  .then(() => makePLMgroup("cfortran", "system", "1", "5"))
  .then(() => makePLMgroup("ccobol", "system", "1", "5"))
  .then(() => makePLMgroup("ctutor", "system", "1", "5"))
  .then(() => makePLMgroup("cnosts", "system", "1", "5"))
  .then(() => makeinstructor("noscrse1", "system", "2"))
  .then(() => makePLMcurriculum("tutplm", "system", "18"))
  .then(() => makecode("wsbatch", "system", "18"))
  .then(() => {
    process.exit(0);
  })
  .catch(err => {
    console.log(err);
    process.exit(1);
  });
