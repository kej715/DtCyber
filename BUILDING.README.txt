
==========================
BUILDING dtCYBER on Linux.
==========================

In older Ubuntu versions and older X11s in general, there used to be the fonts

-b&h-lucidatypewriter-* ...

To use these fonts on modern installations, you MUST also install xfonts-base, AND (xfonts-75dpi OR xfonts-100dpi)
and log off/on again to ensure that the X11 fonts server is refreshed.

Depending on Linux version you may also find the step-by-step install onto a Raspberry Pi below helpful.

============================
BUILDING dtCYBER on MAC/OSX.
============================

For recent versions of OSX (e.g. OSX 10.8 or later):

    Before making dtCyber on any recent OSX you need to install the XQuartz X11 server from
    https://www.xquartz.org else the build will fail with missing X11 header files.

Running 'node start' may require sudo

====================================
BUILDING dtCYBER on Raspberry Pi OS
====================================

Background:
    Based on starting with clean default image of 32 or 64 bit Raspberry Pi OS with desktop.
        No benefit seen with 64-bit OS version.

    Tested with Pi OS Bullseye 32 bit, released May 3rd 2023.
    Tested with Kevin Jordan's repo at https://github.com/kej715/DtCyber
    Tested on: Pi model 3B, 3B+, 4B, Zero 2 W
        The Pi Zero 2 W runs dtCyber well and is good value at US $15
        See notes below if you want to run on older ARM7 or ARM 6 models of the Pi

Suggested steps ...

Update, upgrade and reboot:
	sudo apt-get update -y
	sudo apt dist-upgrade -y
	sudo reboot

Install and test any display drivers or VNC server now.

Increase swap size (only strictly necessary for 512K and 1GB memory, but just do it).
    sudo dphys-swapfile swapoff
    sudo nano /etc/dphys-swapfile
	    Edit CONF_SWAPSIZE=100 -> CONF_SWAPSIZE=1024
    sudo dphys-swapfile setup
    sudo dphys-swapfile swapon

Install git-lfs (else you will not be able to clone the dtCyber repo):
	sudo apt-get install git-lfs

Install Node 16.x:
	curl -sSL https://deb.nodesource.com/setup_16.x | sudo bash -
	sudo apt-get install -y nodejs
	node -v

Install X11 development and required fonts, and critically reboot to load fonts
	sudo apt-get install libx11-dev x11-utils xfonts-base xfonts-75dpi xfonts-100dpi xfonts-utils
	sudo reboot

Continue with normal setup ... E.g. Git clone repo and switch to dtcyber directory and build
    git clone <dtCyber repo of your choice>
	cd DtCyber
	make -f Makefile.linux64-armv8 all
	...
	Remember to make 'all' to install the NodeJS library

Notes:
    1) Running 'node start' may require sudo
    2) Note on most Pi you will need to edit the 'cyber.ini' file for the appropriate
        OS version you are starting to slow down the key entry to allow the date and time to
        be set correctly. For example on emulated NOS2.8.7 on Pi 2 Zero W the following revised
        values may work better (some further tweaking needed):
                set_operator_port 6662 (unchanged)
                set_key_wait_interval 500
                enter_keys #4000#
                enter_keys #25000#%year%%mon%%day%
                enter_keys #3000#%hour%%min%%sec%

===== Notes for Older Models of Raspberry Pi =======

FYI, DtCyber will run on the original Pi Zero but is very slow to both compile and run, and
the console flickers. However, if you want to try ...

ARM6: Raspberry Pi 1 Model A, A+, B, B+ and Zero (Single-core ARM1176JZF-S)

    1. Install unofficial build of NodeJS for Arm6. E.g.
        wget https://unofficial-builds.nodejs.org/download/release/v16.20.0/node-v16.20.0-linux-armv6l.tar.xz
        tar xvfJ node-v16.20.0-linux-armv6l.tar.xz
        sudo cp -R node-v16.20.0-linux-armv6l/* /usr/local
        node -v

    2. Set the cflags on the Makefile to do best build for this CPU (this works well on almost all Linux machines)
        CFLAGS  = -O3 -I. $(INCL) $(EXTRACFLAGS) -std=gnu99 -march=native -mcpu=native -mtune=native

Arm 7: Raspberry Pi 2 Model B (Quad-core ARM Cortex-A7)

    1. Provided you have installed the ARM7 version of NodeJS you need only change the CFLAGS as above.

Note, however, if you follow the steps for ARM6 build above with the CFLAGS change you can swap the SD
card between any Pi and just 'make ... clean', 'make ... all' to rebuild the code for the installed CPU.
